(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    103681,       2323]
NotebookOptionsPosition[    100481,       2214]
NotebookOutlinePosition[    100858,       2230]
CellTagsIndexPosition[    100815,       2227]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Random walks in the plane, four directions", "Section",
 CellChangeTimes->{{3.613745132407096*^9, 3.6137451366700964`*^9}, {
  3.613821353219021*^9, 3.61382135545535*^9}}],

Cell["make a random choice of direction", "Item",
 CellChangeTimes->{{3.6137451558540964`*^9, 3.6137451616370964`*^9}}],

Cell[BoxData[
 RowBox[{"g", ":=", 
  RowBox[{"RandomChoice", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.613743598154096*^9, 3.613743608457096*^9}, {
  3.6137436387760963`*^9, 3.6137436661590962`*^9}}],

Cell[TextData[{
 "the function ",
 StyleBox["step1", "Input"],
 " takes as input an (integer) point in the plane and steps in one of 4 \
directions, randomly chosen using ",
 StyleBox["g, of a step length 1", "Input"],
 ":"
}], "Item",
 CellChangeTimes->{{3.6137451558540964`*^9, 3.6137452129460964`*^9}, 
   3.6137498881042705`*^9, 3.6138312899450135`*^9, {3.6138313858096437`*^9, 
   3.613831389560644*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"step1", "[", "x_", "]"}], ":=", 
  RowBox[{"x", "+", "g"}]}]], "Input",
 CellChangeTimes->{{3.613755068166066*^9, 3.613755092840066*^9}, {
  3.613755140701066*^9, 3.613755152103066*^9}, {3.613755542147066*^9, 
  3.6137555443950663`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"Graphics", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"PointSize", "[", "Small", "]"}], ",", "Blue", ",", 
      RowBox[{
       RowBox[{"NestList", "[", 
        RowBox[{"step1", ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", "10000"}], "]"}], "//", 
       "Point"}]}], "}"}], ",", 
    RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6138229737304935`*^9, 3.61382315541066*^9}, {
  3.6138238798921003`*^9, 3.613823928916106*^9}, {3.613825193255433*^9, 
  3.613825205199628*^9}, {3.6998370650173817`*^9, 3.6998371738582907`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {RGBColor[0, 0, 1], PointSize[Small], PointBox[CompressedData["
1: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
lva953vvfcbhTP97jCrS2cbva+Ja5GMM7X1J5Hy/JJp9LWmtb5rHT9vTfKxf
3L+09zfe+Tf2PkafN/V5T9/n6PNL7Pkg9vygz0f8/LaB9Ffgl8T6ZODz2FfI
40vQdOx5zp5/vqJ26iPthXz+CR4C/0HciPKNpL8A/w5+Tgznus+IL6L8RbKz
fsmxf0Z+Xjy1fy75fCH5an/+gXpfEF9EfeMLOfYvlH9K3CCa/T8lBvtB8BPi
C+CLooP9Y+IGcD1YT/ojYvD7EPyAuBHlG+HHOmbXeKo/RLsfIp+PKC/jOiff
T4gbSB8k1mPc6knH7J+J/hR+Nj+f0TxtELv5r4voOtSvw3owrsN6MdZhXdWR
DqyFfy3pwBr412B91uC6M1aDVbheq3D9GqvBGrBWdHXEn+MFVqKdSuRhrEB5
BekvRAeuTbEfImr8KtJfROyHiDYeNcjbWAvWwV6H+sZ1iG+sd/Q/qLwe8+Pp
z4nrSX9GXBdZH/VOe/9AnENE3p+/JG4UzfeTr1Ae03q/+Wem/75TT/Z/EjeQ
PpRi3yj5vUD6K7F/ReT+meb75UbwBdiNL4Ivof5LKTrwZZQbf4fy35E2+1fE
l9C+8UXRwe8weAQ8Kjpm/ybifwT5sH4JcV4ifTSLPoJ8j4LfEF8AN4Ib4Ge0
99T8vtr0UeIG0fUR7b1P1fe/ubyft/NeLu9Pbb/zft+Laa++7p+eP/+e+KXk
4+23afnZ/q372yEi72+m/0lcR9e3p/n6PZS5+vz3BdE7X8X031FPz09s985v
sfOfnQ/tfKZaz2vW/ufEjUn/eS0WP9t5NK3+RmqP+78+6d/vbf/X+w3b2Z/v
L975gs8ftcnA88jnGf9+pZrvV+uTgeejg6I/I/J4pJ33Nybx+fw7xj3wZfB3
8Psd4hp/jzx+T9rsn4IHwU/Aj4kvk/7Isf+e9CfEl8GXkoHn848z/ed07/x+
MDPw/P8i+BLyf4n0QWrnJWr/IPgpkfv7KfFlxH0Z42jjyuMbG+/PMQ6B/wdx
jDzesfn4XLTZD4r+1In/f8H/Jzqtfc337+AXxN+jnP1Ve+vtZUfr+PJ82Dza
/PLznj4P8vUTu57S9pvYfhe7fvV56ZPM1c9npvn5ap3j/wmVe3atn/Y8FXue
s+fAtOdBja/5qPaeB3n/i53fNf4nxNh41CXZnxdNZ3te/IJYkwx8XmR7LvFi
du9+UoP8a9AfYy3Ka8keWE36c2I12qlGu0Z77uPnO30ePAT+k1hB+kuidz7j
86Gd8/h8le38FzsP2vntUEQfyvjPq/8gVjv6EJWz/RCxFuW8PvT9Qq7jn6Z5
vel6VP0PIp9HD2G9H8pc/bx5iMjPu7H3dZ5+EfWMLyC+8UXRG5OB593Y863l
p8/n+n7gi0z/uc07v6W9j/L2S95f6pL+/eQgxvdTou0zafurtq9a91/dbz/N
5Lb/fkb02mN7neRv/eH9xtavrj/W1Un6fqj1df179s+JVWAl7MYKR39OXAuu
EV3h+Mfimf6C6O2P/P6N/bPl+3fk9XfkGbiatOb/GfWD9WcRf9OfEVeDqzDf
q7COjKtRvprsrNfAbw3WaeDHxNUoX036I/BD4hqUryG76o+Jnv+HkfhevLVg
BeJVkP6QuFZ0mK8PiFUoN1YjjrEK8Y3VYA1YG9F1qG+sTfE3+4eirf7HRK1f
Tfl9QqwEKzC/FSn6E4zTQfBTYgXWl3d9fS72T4mVKfU/I3J72v5B4pos2vpV
CfJ4mP5UtNm98bNxrSb9CcaddVp8zqeC8v2EaONfmZK/tn+Q8uB8Dkq+uj50
/XJ9Xp+fEGuS+Pq2+ymvT+9+q+tX48fa+4hYnfRfnx+A74PvgX8T/R76/Tfw
PaLZaxCnBnFZv0/t1JD/e5H2Y1rjx/J/X/rn7U+VGA+jZzf9AbE6i65E+5XI
h7Xul+8TuX/vYx4/yFy9n5k2+3ui38f6eB/rxvR7xFrMozG09y6xmvTfiNye
zvd74m/13wHfjui3Ee8d8F0nvzqUG9eRfoe4DqxH3MC/EteJXg9ugL9xI8o3
kv0t4nrSfyVuFL0+pT3zfwt8U7TGe1va43zXU3zL701iPcp1PDQ/G586xK0j
/ZZo838LfJNYT/oNsau/2t8g1oPrSWt/3iS/eqr/OniAWI9y43pHH6By1l59
a6eOtJe/138bzzdlfGP2N3E9vEH07G/iulL/mD2m3yJWk2b/asQ31mAcjLU0
PgeItaT3E9c5eh8xlO8lrgPrRQd7r+Nfi/Ja0nuRL+s6am8fymPtc371lI/p
/cR1pPcR14leD7/1Ofqvo/i63nX9ml2vD6++rWsjryfTPJ88/weI1Y5+ncqr
nfqvk5/qKvhXIe8qjEMVxp+12gMrwQrS+4lp8fYhj320bnT91ETs1Vh/gT3E
GtK9xBrRVSla65vudtqrQnlgF7ES5ZVkt/pdYCfYIboT/qo1fiexAuUVpDuI
a1G+Fn5pWv0D14CrwVWoZ1yN/hnV/jzqPU/a7J3E1Vm01n8OfBb8LfgM/J9B
f4y/dfQesJ34DOk9VO+3iGt8FuXG5+BvfB7lXv+7ic+R1vHqhN3aM63ttROf
jeiQdxvYSnxG9LNgqN9CfJbsppuJoX4TuFt0E9oJfBpcCa4An0KcpxDfuALl
xpUp9XeDGk/tu4grUG5cSXoXcWXE34sf608r2EZcgflZgflcgfk1rsS8ryS9
h/i0aIvzFOI+RbqDuEL0b8Bfg79Cu7/CuvwV1qkx/P+U9RDV/mvSXcRfi/03
pM3eSfyN6Fg+XL+L6hmfQvlTZGe9IsXeTVxB/qq7ZL46MT8dNE9G22eewTow
8vVpWvcjvZ7bJF7M3ob2tb1A2yeeRTve/tZJtP1pFey8n+v9IW2/t/sL34+6
UB67X3VRvTWOv90PTXeDPcRg7wVVB1aivJLsqrulfnfGvx935WjP1t9uoo0r
j6/df3tEZ7vf8P3Uuz+ZXee/g2jrYDXWj3EV1pXx+aT//mj2NP/VKbotxX8N
4q1J0W3E1VR/j+hs7behP+1Etrc6/hy/jcj+rY7dy9d0K3EN6RbiGjCsq2ZQ
dTPWYxMxlO8mVoDhetgFmm4Cm4kVTnyztxCrUG6sdnQLsQashd1YB65DPuuQ
H+tmYh3i1Dn1A+tRrx5x6tFv43qUr4ffevJvonbr4GesRf3AnaLVvsupv47y
iWntr47HLmI98qh39E7x5/a4P/9ufjq+Xnz15/nyxtfzb5L10kSsAW3dVTva
W3+mq3DdVeG6rMJ1aqwEK8BwPewhriFt9jZiBeJXkG6juJWkW4lWb21y9f6w
VuyVTrw9xArRVaQ7xL+DWOXoTio3es/He4g1YC1YBz9jLek9xHVgveg6itdO
rHPid0ba03wsfju1w7qd8qgnHbje0XuofD3mx1iPeasn3YZ22pBPm9N+ndi5
/7H+dBC9/lt9jafj6bWv+daiX8a0fNuxLtpA07xebP3weuXr0a7PasSpRrvG
GtJtxBrS7ZmB61XXt76/4fc93vugEL8LjOkOYi1pr//e9aO6ncjrldfXeoyH
MfyO0gKabgPbidnW84aUeKabietJq72JGH4H2g3GdDPxBcR7Ae2zboFfC7W7
HuTrsRXj10KsczSfN/h+ZNo739Qk/nmH/bk9vZ5qSLcR60TXkL9eX7z+vetV
4+v1auvR1msnka8Hz27rXPcrXu+x68mLr/eniqT/fWhg2vODdz/17Hx+z+V+
bucH1a1E737N5wu9f9v+5+1PnZmr3zfz+2t+n90l/p2wdxErkv7nXXv+9p7v
7T3A6qT/+dGeJ/n5UJ83nyPdmfHfl/L7C35/a++Lu4nhfUgP2Cs68GlwJeyB
e8F94H7iiogO75EOgPuJK1C+guyvE38jOvi9Ab5OVP9fI57xV2jP+B/gk6J/
hX4Z/8PxP0B8AuVPkH0f8QnwcdFPSvtW/3HENS4n/brYXyc+AT5JWvPTfPYT
2f+A2L38We8lPo518jhpbU/j6/ip5vH25kPHbz+N23LSgcuQj3E58jQuI+3Z
H4/oJ9DvJ3C9GHk8PPuTKH8ScVirPVa/W/xj76f5fXSwd4JdxCcd3Ql2EIN9
D9gh8TopDufXncP4LEf58hQdG38bP72+crkeTS9P/OtjeeJfn08k8evVq8/r
j9fbUpQbHwMfFa32NP+9YC9xqaP3Eq3eo6SzxdP8vf4so/7vj/RX29P6Nj96
fet++AbR9kXeH3X/zmU+lyXx/cT6sx9578f47Zf+sH1p4u9HPH42vj0R3R3R
3Yin9h60H/PvIi7Hdbwc17dxGcqXkb2LaPXT4nN+fH2r7oFfr1wvqtOuH14/
5q/rUXVsvmPrQfXrxMdJvyH2N4jLSL9JXAYuFa32oN8ihvK/gm8Tl5N+x7Ev
dezvoN67xFD+N/A94lLwMfBR+D2KeqwDHwF/CT4Mv4dJBz6E8oeQj5H93yU/
T3M8bu89Yih/n/gwGOJ8QAzlH4IfELX+I4hrfFT0Lx1t+b0LvkN8hPTbYlf/
tPqPOvHeJT5M4/u2aB1fmw8e7wfBJejPEvTP+ADGx3i/oz8APyQ+QPoj4gOO
3bTZPybe7+iPqJztGv8D4v2kvf7cR/o9Kr9f6t8X6e994C/Ae+F3L+Lci7j3
YpyN94B3k36XeDfmzXgP5vkeR/9V9Nto5x3iPRRP479L5PY1v/eId6N/Rrar
1v6/R/wFyn+Bdo33ofw+0u+K/9/I737Y7yf/d6S++tt8a/13iBaH83uHeC/K
uX+qY/3l9fALp3/a3tvE+8D7wQewDgLfEv1X+L1FNL8l4IPwMz6EuLH9g/eb
2P7k7Tfefh+7H2h81pyf7X+238a07pe6P3v1Lf6D4BIab9PvEB9w1k9svmL+
vL7uc+x6Pdh6s/X4NpH3h7fAN4n3ir4bfsa7UG68E+V3kj1N34F6d5A2u8V7
Q7S19wbxbsrP9OvE4HcA3E+8E7wjohdH7Fb/bifePiK3t48Y6u0F9xHvcrSX
b6w/ucTj/O6g/h0AXwffIHrjH9NvEDneAeKdKL+T7Kpj/qZj4x0bf52vNPs9
sN9D+oDomL/O716U78X1ZLqXeC/pHuLd4F1g6Fc3MYxPF9Gzd2Md9xBvR3vG
21B+G/yNi0h3EReBt8J+K+nAhShf6NhN94C9xIWke4iLUL6IdI/E43xZd1F5
tvqW7y3gzeAC+C9AHsabwBsxr8abxM71eyjuzcjPGOydYAfxZpQbb0H5LY5d
41n+Gr8T+XVmsXcQF4i+EX7G+eA8cC7pDuJ8p77pPURun/PV9m507F3EmzAO
N5HW8eH59ua/i8j5xMYjl/Y9ew+R84tpXo83Y/3dTNrse8Wf16PXHvf3Zqf/
3UTubzdxPjgP8Y3zSafZbyTdS+TrrZfI42faux5zqa/td1Ne853+dWO99xDn
ke4lzgFnI4/AfaIDZ5HuJc5CXKPa56B8TiQfzr+LOI907PrS6ye2fnV92Hj2
ir6W9eDpXuJcjJdxHsbVOFf0fEfvddbbPNJePja+c5C/cTbND8/H7BS71e8i
zgZnYR6Ms0l3ETl+F/kFdhBngTOTn/fbmaQ7nPZmgjMQ1zgdLHd0J7EMcY1q
n071u8Ee4gzMg3E6WA6WgaWke8BuYjnKyyl+t7TfSSyX/pVFdCnilCJuqeRT
gvVVgvXGupdYKv0ph1856R7ROh57iWVgqWi291J5GfIrc+w9RG3fq78P7e4H
VR8gljl6fySejV8uehryMup4TwOnglMiuph0D7EYnAxOwjowTkT5RNSfiDyM
k0irvZc4ifz3gftF70Me+8EDxGLRXH8/1fPi7UP9fej3XqKNE4+XjU93RHcj
nukusBPsEN2J+J2Yry6wk1gieir8pqIdT2v7XeQ3jbTF6wD3iO7Iko/Z94ju
IL8S0mn+1p6NU3FkvIqz6LT8s+UbWAq7sYT8bXxMt4NtYCuxxNEtxBC/mch2
003EaWBofze4C9wJ7gC3g9uI00hvBRuJU0g3EKeR3gJuJk5D+TTxLyFt9s3E
qaJL4FdCejPGJ83O8bz8poDFYLjuNxGLSW8mTiK9BWwgTkL5JMffi1ecos3/
NfBV4iSUT0qxvwKq/ybi5JT2XpP6gRPBCYhvvIG0Z58Y8R8Pf+P1KDeOI232
14jjwLGkN4GbiddjXozjHd0ANoJbiTeAE2A3TkS9iYhjnEB6s2Pn9bFJ9BYi
x28kTnB0A5H9txInRPxvcOrH+qP2zURe77ae+Xqy626Ko7eADZn+fSdt/2nM
DNxfpqb4e7rkGuuXwF6C8TSWorwUfqUSv9Sp77XvxW8kWjtlYDn8ArcRp5Pe
LnbTO8CdxDLR00nvIk4n+w7Ru4ga3/xmgDNR3ziD4m2nfkxHP1lvj7S/k+LM
gJ+R29tJTPPfBm4nzkL5LLJvQz3WZp9NeivYSJyN8tmk2T4zomdg3cwg3Sjj
1UgsJ90AbiGWg2Ww2zrzNMczrevf899KLMty/Vi75ZKf5TuD9GZwU0S/RpwB
zoR9Zop+DeO+CdxMnO3oTUT29+rPdOyvEbn9V4maH/fH7K8Qc6m/iej1/1XJ
T/uzhWjjYpyD8jmOfQuR7Q1Er37M7rU3F5wH+zzkb5yL8rmkXwNfBV8hhrh/
IYby/ybOI/1fxOD/n8S5YPD/M/gn0X+G359Rz/SfwD+CfxD9R/j/ieqxjtn/
jHHV9mL1/wj/P4B/JM4CZ4IzSP+Byln/AX5/wPXK2uyzqD3V/584B+Vevpbf
n4izqf//SfTG509EG5dcxl/nn9eHrRvjfKyv+Vh387EeWQfeiPIbsW6N88F5
sBt5fW8izkG5cXaKfpU4V+LPd/LZRLyJ9GbiTWQ3vQVsIC4g3Sj2RmLw2wo2
Em9CufHGiJ4PzkM941y0Z5xHWu0x3Yjx2wpuA7dn0Xae2Eq0c4WdC2am6K0Z
/7zg3Z+nk3/a+SaX9vQ80kDkfBqIXjzvvOWdB+18q+ddts/Iwd+rXxbRpfAv
Jb2TqOfrMse+C9xNDPYm0PQuib9L7E1Efn9k75O890/TsuhS1CtN4u+z2iQ+
26ciztQs7U1FvlOT/vdb9r5rN9Hee00hrf5NEq8Z5TYezdQu58P5l6Jf2v+y
lPFooX5z/2Na+8/2KaTbiPy+Ud8/tsOvHfX3EKeSneNNofZaIjqwGOXGyeAk
0m1UPpn8vfpTHG3tNYNNorPZY+vH5ttbTyWkdxFLSO8EdxBLHL2TWEra87f3
tFPAYtI7wV20zrm/+v43tt7T1mMu64vXk2l7D24sBctgL3N0O/ysfhtxWpb2
S5z1ru1b/LaI1v2pjeJ68bX//L5/Cl1fev1446vXSzHqFVN973otJs2/h+jv
I/z7RrbfWzqJ3u893vjGfh+Z5tTX/ccbP/79RPuj/c2mO4lTnf7F7Pb7VzeR
fy/T39P49zIe3y6iF8/7Pc5rT38/1N8LO1Py4fg9Tnu5/P6Ytr68399i+anu
oHKdHx2/0qT/+4JulNt49WT6f8c2lqDcGKtvuiwlvjf/9vvtZNHe76k6v956
KHHsun50fDqRb2y8uqhfZaQ7ieVJ//coe4hlpDuI01FunIHyGWTXeFyf29fv
R64lv9BOO9hGLCfdTixPBt5/9P7g3X/UrverMvjZuc/TrWi/BWwlsj/HL8+i
OV/vflhK/bP9Wn+/1u+RYvOl45Wtvq6PdrBNdOBMcJboGdewvnS97qG8yiRf
3p/tesr2+7/e/2P3N73/BxaT1vN2rH5M6/nce37i83hz5urzdeBkcBLsxoko
n0ia7aFeE9hMLHbsu4mh/i7iRJRPJB04AeUTEIf1LuJEireTGNrbQSxGeXGS
+/lZnx/5PF2M8mLUK6b6+n2F9zwwNcn9ecC0vj/Ynok/L5SQ3fy3gVuJ9jvi
tIie6mj9PsTz936fZV0MTob/ZMRjvRXz2Qg2EO17ihBnC9hA5Pa3Ejn/7cRp
jtb+xb6H8eJNySG+zVe29RGz6/rynh9tHZUmA9//2POsvv8xzc+7XP/ffR8V
a0+/X0r7nqnUyU81P4+XOvl430flkk/sfZX3PGfPqd79Qu+/naK978e850+9
v/Pzq50jyhP//FGaDHy+1edf732W9z5P++vZvfY8u3f+Ua3vC2LnK6+/7K/j
ExuvFtHZ7Nq+2ZuzaDsPsi517K2Up6f5fMjncz3/7hF/ra/nv86Mfx5Uu34P
bs8b9r10tu+j7fts/n7Zs+v32/o9uH7Pblq/Dzf/2Pfw7M/f2+8l8vf4qnuI
0yU+j0fs+3hvPEL5fvAAsTTp/558P/nFxlO/j59Oeh+R50vz+Xe/X9fv6fV7
/2zfz2t/dX1YvB5iSTLwe3f7Hl6/f99LnCbavoPX79+nRjQ/3+vze+x9XMwe
e5+pz4fe85f3PKTPc977Wr0fee/v9H0kP+9MRvnkiJ3fj+r7ztYsdn3+8X4v
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
7b3gXtFq702JH/T/ANJUapY=
    "]]},
  Axes->True]], "Output",
 CellChangeTimes->{{3.699837069523548*^9, 3.6998370776962595`*^9}, {
  3.6998371184428835`*^9, 
  3.6998371747990637`*^9}},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztvQ2wbld5HvZxz3f+7jn3cqXL1b2CK5AE+jEIG5ABWQjzYyCAoBaZWMiI
OPIPql2chEnTZrBbSzf+qU1aYyfgifFca5LKHZNO5LYmp7FnYhjLMfGM0zNT
d9oMHXuMk8mhrl2CiYEW09Oz11p7f2ut73nf93nX2ldNZzqj7zu669t7/e21
3//3ed/5nX/9e9/3l7/zr3/fd3/nzX/ur33nB773+777P7z5LX/1r500bTxr
sTj1PSef3715Mfz/8WIxfh2f/Be/Hh2+hma+4XRo2Dh+9NH40/D5du9FX4i/
L44OriyGa4bPMnxvnnxfWRwcHU/3HR9ePbly+O3k++rh1L5FjnF8dLC4cnLN
lYOjxXZo2w59DvddPRzHOVxcHeZx0v+20e+fVHMf+tgcxzo+Whxcif1sjG1h
rLgma85fTPccXo17Msx5CdaxUbUNc7D6/tfTHNNa026HfX306uIw3bNRrU8a
b6Pqb7guzGE5TOGhbOQ/LXYi7s6pqg31OFxnrepL6Ynmsx1PTWO/H4o/vf6T
nzze+fKXi00p2k6BtnR4PvDhDx+f+/zni+uKNtRf+H57OtvxBKSnstp1cdPx
Un4i/Fl++p57woYdXboUhosz2q2bh9a1ttj77hf390P7106dmlax1nYKDxcu
fpN4hLbSw0uv/eqY16fOWOyPhz87w4hf3tkJMxg+93z60+Gysf1UODobQ/PY
tMjapl7T5IaFjV0Nn+/5uZ8Li90ItyyHfwq9ryjY8P1GcAjL9Y+v4ERCnBQk
PuyNxx97LMzkiUcemc5Z0XYKtKVz+6nXvS4s8n990Yum64o21F+YxFuM93D1
zvdR30ghNwvOMfa/TL9NY2a/7Rj9WmzLSRQ+8v73H1/83OeKtqfvu+/4ts98
pmj7pQceOH7+Zz/rIxSI8ITvdzdSgi1ECf5sY2M8zeNKwr9S27iS//tZzxrb
tsaV1ITBQ2+shfjf8mH2+cx/7IMfDM8hbzt429vCc8jb/t53fMfx+PanNu11
V4lJ+P622d7d33/BC8K0vnD27NT2le3tadPHtn/z7GeHtv9rc5N/nxF9CJN9
qPMd+ilwvpX34HdvvfX47t/+bfMdKt61DXmM4roz0jv05+T5fzi+LIgVDm9B
eu7jMvKjNC4DvUDDe5badqfpgZeounYjv3ZxGr/e1op+Mq4I8bhhGRurF2FY
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
JkYU7g==\
\>"]]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.699837053925992*^9, {3.699837135983427*^9, 3.6998371366554375`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6998370573071604`*^9, 3.699837057890769*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"step2", "[", "x_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"g", "=", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Norm", "[", 
        RowBox[{"x", "+", "g"}], "]"}], "\[LessEqual]", "10"}], ",", 
      RowBox[{"x", "+", "g"}], ",", 
      RowBox[{"10", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x", "+", "g"}], ")"}], "/", 
        RowBox[{"Norm", "[", 
         RowBox[{"x", "+", "g"}], "]"}]}]}]}], "]"}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 CellChangeTimes->{{3.6137572342440033`*^9, 3.6137572980813866`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findAngle", "[", 
   RowBox[{"{", 
    RowBox[{"a_", ",", "b_"}], "}"}], "]"}], ":=", 
  RowBox[{"Arg", "[", 
   RowBox[{"a", "+", 
    RowBox[{"I", " ", "b"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.613757562071783*^9, 3.613757595786154*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"step3", "[", "x_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"g", ",", "\[Theta]"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"g", "=", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Norm", "[", 
         RowBox[{"x", "+", "g"}], "]"}], "\[LessEqual]", "10"}], ",", 
       RowBox[{"x", "+", "g"}], ",", 
       RowBox[{
        RowBox[{"\[Theta]", "=", 
         RowBox[{"findAngle", "[", 
          RowBox[{"x", "+", "g"}], "]"}]}], ";", 
        RowBox[{"x", "+", "g", "-", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "}"}]}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6137572342440033`*^9, 3.6137572980813866`*^9}, {
  3.6137575363542113`*^9, 3.6137575486744432`*^9}, {3.6137576699105654`*^9, 
  3.6137577716587396`*^9}, {3.613757907784351*^9, 3.6137579140719795`*^9}, {
  3.6137579850190735`*^9, 3.613757988307402*^9}, {3.6137582448770566`*^9, 
  3.6137582473082995`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step3", "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "0"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.614019117559638*^9, 3.6140191286577473`*^9}, {
  3.6140192128691683`*^9, 3.614019219020783*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"-", "1"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6140191291187935`*^9, 3.6140191504609275`*^9}, {
  3.614019214860367*^9, 3.6140192224161224`*^9}, {3.614086786610186*^9, 
  3.614086797972322*^9}, {3.699837372143444*^9, 3.6998373744469247`*^9}}]
}, Open  ]],

Cell[TextData[{
 "start at the point",
 StyleBox[" {0,0}", "Input"],
 " and do some number of steps, returning a list of these poiunts (the random \
walk):"
}], "Item",
 CellChangeTimes->{{3.6137451558540964`*^9, 3.6137452129460964`*^9}, {
  3.613745249471096*^9, 3.613745296996096*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"step3", ",", 
   RowBox[{"{", 
    RowBox[{"0.0", ",", "0.0"}], "}"}], ",", "50"}], "]"}]], "Input",
 CellChangeTimes->{{3.613821689104556*^9, 3.6138217081826487`*^9}, 
   3.613911563087494*^9, {3.6139115966968546`*^9, 3.613911688896661*^9}, {
   3.614019227805661*^9, 3.614019227972678*^9}, {3.6140868056050854`*^9, 
   3.6140868067081957`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", 
     RowBox[{"-", "1.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", 
     RowBox[{"-", "2.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", 
     RowBox[{"-", "3.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", 
     RowBox[{"-", "2.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", 
     RowBox[{"-", "1.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", 
     RowBox[{"-", "2.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", 
     RowBox[{"-", "3.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", 
     RowBox[{"-", "2.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", 
     RowBox[{"-", "2.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.`", ",", 
     RowBox[{"-", "2.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.`", ",", 
     RowBox[{"-", "2.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.`", ",", 
     RowBox[{"-", "2.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.`", ",", 
     RowBox[{"-", "2.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.`", ",", 
     RowBox[{"-", "3.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.`", ",", 
     RowBox[{"-", "4.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.`", ",", 
     RowBox[{"-", "5.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.`", ",", 
     RowBox[{"-", "5.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.`", ",", 
     RowBox[{"-", "6.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.`", ",", 
     RowBox[{"-", "5.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.`", ",", 
     RowBox[{"-", "6.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.`", ",", 
     RowBox[{"-", "5.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.`", ",", 
     RowBox[{"-", "6.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.`", ",", 
     RowBox[{"-", "7.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.`", ",", 
     RowBox[{"-", "8.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.`", ",", 
     RowBox[{"-", "8.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.514357068821368`", ",", 
     RowBox[{"-", "8.125842723878462`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.514357068821368`", ",", 
     RowBox[{"-", "7.125842723878462`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.5143570688213677`", ",", 
     RowBox[{"-", "7.125842723878462`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.514357068821368`", ",", 
     RowBox[{"-", "7.125842723878462`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.514357068821368`", ",", 
     RowBox[{"-", "7.125842723878462`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6.514357068821368`", ",", 
     RowBox[{"-", "7.125842723878462`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.514357068821368`", ",", 
     RowBox[{"-", "7.125842723878462`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.514357068821368`", ",", 
     RowBox[{"-", "7.125842723878462`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.514357068821368`", ",", 
     RowBox[{"-", "8.125842723878462`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.514357068821368`", ",", 
     RowBox[{"-", "8.125842723878462`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.997184602999257`", ",", 
     RowBox[{"-", "8.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.997184602999257`", ",", 
     RowBox[{"-", "7.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.997184602999257`", ",", 
     RowBox[{"-", "6.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.997184602999257`", ",", 
     RowBox[{"-", "5.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.997184602999257`", ",", 
     RowBox[{"-", "4.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.997184602999257`", ",", 
     RowBox[{"-", "4.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.997184602999257`", ",", 
     RowBox[{"-", "3.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6.997184602999257`", ",", 
     RowBox[{"-", "3.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7.997184602999257`", ",", 
     RowBox[{"-", "3.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6.997184602999257`", ",", 
     RowBox[{"-", "3.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6.997184602999257`", ",", 
     RowBox[{"-", "2.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.997184602999257`", ",", 
     RowBox[{"-", "2.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.997184602999257`", ",", 
     RowBox[{"-", "3.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.997184602999257`", ",", 
     RowBox[{"-", "4.269961516820217`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.997184602999257`", ",", 
     RowBox[{"-", "3.269961516820217`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6138216838660803`*^9, 3.6138217092355433`*^9}, {
   3.6138228038847165`*^9, 3.6138228079567165`*^9}, 3.6139099453827395`*^9, {
   3.6139115641355987`*^9, 3.613911608011986*^9}, {3.613911657817966*^9, 
   3.6139116685620403`*^9}, {3.6140192284917297`*^9, 
   3.6140192340982904`*^9}, {3.6140868011286373`*^9, 3.614086806986223*^9}, {
   3.699837404161246*^9, 3.699837409696514*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"step3", ",", 
   RowBox[{"{", 
    RowBox[{"0.0", ",", "0.0"}], "}"}], ",", "50"}], "]"}]], "Input",
 CellChangeTimes->{{3.613745281015096*^9, 3.6137452811510963`*^9}, 
   3.613750538544081*^9, 3.6137550257490664`*^9, {3.6137562622108097`*^9, 
   3.613756269154504*^9}, {3.6137567202506094`*^9, 3.613756763995983*^9}, {
   3.613756901617744*^9, 3.613756958635445*^9}, {3.6137570604476256`*^9, 
   3.613757119817562*^9}, {3.6137572130848875`*^9, 3.613757213283908*^9}, {
   3.6137580182253933`*^9, 3.613758021233694*^9}, {3.6140868127728024`*^9, 
   3.614086813012826*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.`"}], ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.`"}], ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.`"}], ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.`"}], ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.`"}], ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.`"}], ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.`"}], ",", "3.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.`"}], ",", "3.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.`"}], ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.`"}], ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.`"}], ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "5.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "6.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "7.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "6.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "6.`"}], ",", 
     RowBox[{"-", "1.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "5.`"}], ",", 
     RowBox[{"-", "1.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.`"}], ",", 
     RowBox[{"-", "1.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.`"}], ",", 
     RowBox[{"-", "1.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.`"}], ",", 
     RowBox[{"-", "1.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.`"}], ",", 
     RowBox[{"-", "2.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.`"}], ",", 
     RowBox[{"-", "1.`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "5.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "6.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "7.`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "7.`"}], ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "8.`"}], ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.`"}], ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "8.`"}], ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "8.`"}], ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "8.`"}], ",", "3.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.`"}], ",", "3.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.`"}], ",", "4.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.07152330911474`"}], ",", "3.6286093236458963`"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.07152330911474`"}], ",", "2.6286093236458963`"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.103935502025186`"}], ",", "2.3760745031327075`"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.130489943043703`"}], ",", "2.1471558632205596`"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.130489943043703`"}], ",", "1.1471558632205596`"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.130489943043703`"}], ",", "2.1471558632205596`"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "8.130489943043703`"}], ",", "2.1471558632205596`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6140868096394887`*^9, 3.614086813265851*^9}, 
   3.6998374131055207`*^9}]
}, Open  ]],

Cell[TextData[{
 "apply ",
 StyleBox["Point", "Input"],
 " to these points and plot as graphics primitives::"
}], "Item",
 CellChangeTimes->{{3.6137451558540964`*^9, 3.6137452129460964`*^9}, {
  3.613745318186096*^9, 3.6137453419130964`*^9}, {3.6139099493331347`*^9, 
  3.613909951651366*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Circle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", "10"}], "]"}], ",", 
     RowBox[{"PointSize", "[", "Medium", "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.5", ",", "0.1", ",", "0.4"}], "]"}], ",", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{"step3", ",", 
        RowBox[{"{", 
         RowBox[{"0.0", ",", "0.0"}], "}"}], ",", "1000"}], "]"}], "//", 
      "Point"}]}], "}"}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6137437348560963`*^9, 3.613743974315096*^9}, {
  3.613744005018096*^9, 3.6137440118090963`*^9}, {3.613745367522096*^9, 
  3.613745380857096*^9}, {3.6137499427912703`*^9, 3.6137499431982703`*^9}, {
  3.6137562792285113`*^9, 3.613756317228311*^9}, {3.6137563587274604`*^9, 
  3.6137563882804155`*^9}, {3.613756516117198*^9, 3.6137565566452503`*^9}, {
  3.6137567792695103`*^9, 3.6137568073343167`*^9}, {3.6137570249910803`*^9, 
  3.6137570253431153`*^9}, {3.6137573784434223`*^9, 3.613757396517229*^9}, {
  3.613758033250896*^9, 3.613758089265497*^9}, {3.613758136318202*^9, 
  3.613758157215291*^9}, {3.613825566820786*^9, 3.613825608285932*^9}, {
  3.6138257014332457`*^9, 3.6138257451556177`*^9}, {3.613831241945814*^9, 
  3.6138312488481236`*^9}, {3.6139099914163427`*^9, 3.6139099919924*^9}, {
  3.6140191904449253`*^9, 3.614019195037385*^9}}],

Cell[BoxData[
 GraphicsBox[{CircleBox[{0, 0}, 10], 
   {RGBColor[0.5, 0.1, 0.4], PointSize[Medium], PointBox[CompressedData["
1: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
5GCOTSc/6L7lVQNjj1l3RVFoJP8DHMIfww==
     "]]}},
  Axes->True]], "Output",
 CellChangeTimes->{{3.6137565164352293`*^9, 3.6137565365222383`*^9}, 
   3.613756695224107*^9, {3.613756781352719*^9, 3.613756824078991*^9}, {
   3.6137570127038517`*^9, 3.613757050902671*^9}, {3.613757373442922*^9, 
   3.6137573978763647`*^9}, {3.6137580376383348`*^9, 3.6137580905786285`*^9}, 
   3.613758159282498*^9, {3.613825570332137*^9, 3.613825608656969*^9}, {
   3.6138257122083235`*^9, 3.6138257457796803`*^9}, {3.6138312456884394`*^9, 
   3.61383124918909*^9}, 3.6139099552357244`*^9, 3.6139099927874794`*^9, 
   3.613910684123606*^9, {3.6140191922041016`*^9, 3.6140192012690077`*^9}, 
   3.614086817542279*^9, {3.6998374174538608`*^9, 3.699837430608674*^9}}]
}, Open  ]],

Cell["\<\
the next command only gives the end point of a random walk of 5000 steps:\
\>", "Item",
 CellChangeTimes->{{3.6137451558540964`*^9, 3.6137452129460964`*^9}, {
  3.6137453942620964`*^9, 3.6137454137480965`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"step1", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}], ",", "10"}], "]"}]], "Input",
 CellChangeTimes->{
  3.613744043398096*^9, 3.613822617441716*^9, {3.6138227737357163`*^9, 
   3.6138227806307163`*^9}, {3.6138229139525166`*^9, 3.613822949930114*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.613822952276348*^9, 3.6139099638545866`*^9, 
  3.614086828293354*^9, 3.699837440210312*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Here we use NestWhile command to find total steps takes to hit the gate\
\>", "Section",
 CellChangeTimes->{{3.6137451558540964`*^9, 3.6137452129460964`*^9}, {
  3.6137453942620964`*^9, 3.6137454137480965`*^9}, {3.6137454845520964`*^9, 
  3.6137455042310963`*^9}, {3.614019476994578*^9, 3.61401952172005*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findAngle", "[", 
   RowBox[{"{", 
    RowBox[{"a_", ",", "b_"}], "}"}], "]"}], ":=", 
  RowBox[{"Arg", "[", 
   RowBox[{"a", "+", 
    RowBox[{"I", " ", "b"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"step3", "[", "x_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"g", ",", "\[Theta]"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"g", "=", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Norm", "[", 
         RowBox[{"x", "+", "g"}], "]"}], "\[LessEqual]", "10"}], ",", 
       RowBox[{"x", "+", "g"}], ",", 
       RowBox[{
        RowBox[{"\[Theta]", "=", 
         RowBox[{"findAngle", "[", 
          RowBox[{"x", "+", "g"}], "]"}]}], ";", 
        RowBox[{"x", "+", "g", "-", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "}"}]}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestWhile", "[", 
  RowBox[{"step3", ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "10"}], "}"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Norm", "[", "#", "]"}], ">", 
      RowBox[{"10", "Or", " ", 
       RowBox[{"Abs", "[", 
        RowBox[{"findAngle", "[", "#", "]"}], "]"}]}], ">", 
      RowBox[{"Pi", "/", "8"}]}], ")"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.614019564996377*^9, 3.6140196479006667`*^9}, {
  3.6140197044873247`*^9, 3.614019711679044*^9}, {3.61402022005369*^9, 
  3.614020241121583*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{{3.61401964903478*^9, 3.6140197073626127`*^9}, {
  3.6140202216315327`*^9, 3.6140202420744877`*^9}, {3.6140868532568502`*^9, 
  3.6140868608266068`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Questions: The NestWhile Command does not work
\
\>", "Subsection",
 CellChangeTimes->{{3.614089625010049*^9, 3.614089674720049*^9}}],

Cell["\<\
the next command does 10 random walks of length 5000 steps, creating a list \
of the 10 ending points:\
\>", "Item",
 CellChangeTimes->{{3.6137451558540964`*^9, 3.6137452129460964`*^9}, {
  3.6137453942620964`*^9, 3.6137454137480965`*^9}, {3.6137454845520964`*^9, 
  3.6137455042310963`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Nest", "[", 
    RowBox[{"step1", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", "5000"}], "]"}], ",", 
   RowBox[{"{", "10", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6137454322970963`*^9, 3.6137454743940964`*^9}, {
   3.6137455321510963`*^9, 3.613745534574096*^9}, {3.6137456168330965`*^9, 
   3.613745621785096*^9}, 3.6138226232807164`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "33"}], ",", "23"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "72"}], ",", 
     RowBox[{"-", "10"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "27"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"82", ",", "62"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"30", ",", "78"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"36", ",", "52"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"64", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"86", ",", 
     RowBox[{"-", "6"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"61", ",", 
     RowBox[{"-", "73"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "44"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6137454703490963`*^9, 3.613745475258096*^9}, 
   3.613746840307271*^9, 3.613746980424281*^9, {3.6138225962297163`*^9, 
   3.6138226241317167`*^9}, 3.6139100083400345`*^9, 3.6140868681743417`*^9}]
}, Open  ]],

Cell["here we do 1000 random walks and plot of the final points:", "Item",
 CellChangeTimes->{{3.6137451558540964`*^9, 3.6137452129460964`*^9}, {
  3.6137453942620964`*^9, 3.6137454137480965`*^9}, {3.6137454845520964`*^9, 
  3.6137455042310963`*^9}, {3.613745604169096*^9, 3.6137456447410965`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PointSize", "[", "Small", "]"}], ",", "Red", ",", 
     RowBox[{"Point", "[", 
      RowBox[{"tmp", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Nest", "[", 
          RowBox[{"step3", ",", 
           RowBox[{"{", 
            RowBox[{"0.0", ",", "0.0"}], "}"}], ",", "5000"}], "]"}], ",", 
         RowBox[{"{", "500", "}"}]}], "]"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6137454322970963`*^9, 3.6137454743940964`*^9}, {
   3.6137455321510963`*^9, 3.613745534574096*^9}, {3.6137456168330965`*^9, 
   3.613745621785096*^9}, {3.6137456566390963`*^9, 3.613745703214096*^9}, 
   3.6137470405622945`*^9, {3.6138226274097166`*^9, 3.6138226789987164`*^9}, {
   3.614086882848809*^9, 3.614086884999024*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{
  3.614019439324811*^9, {3.6140868781833425`*^9, 3.6140868873272567`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$Aborted"], "Input",
 CellChangeTimes->{3.6140194335392327`*^9}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.6140194335822372`*^9}]
}, Open  ]],

Cell["\<\
here is a histogram of the distances of the above points to the origin:\
\>", "Item",
 CellChangeTimes->{{3.6137451558540964`*^9, 3.6137452129460964`*^9}, {
  3.6137453942620964`*^9, 3.6137454137480965`*^9}, {3.6137454845520964`*^9, 
  3.6137455042310963`*^9}, {3.613745722937096*^9, 3.613745737728096*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"Norm", "/@", "tmp"}], "]"}]], "Input",
 CellChangeTimes->{{3.6137454322970963`*^9, 3.6137454743940964`*^9}, {
  3.613745521504096*^9, 3.613745569405096*^9}, {3.613745747225096*^9, 
  3.6137457476560965`*^9}, {3.613746474019673*^9, 3.6137464762646728`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Histogram", "::", "ldata"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(tmp\\)\[NoBreak] is not a valid dataset or list \
of datasets. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Histogram\\\", ButtonNote -> \
\\\"Histogram::ldata\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6140194325541344`*^9}],

Cell[BoxData[
 RowBox[{"Histogram", "[", "tmp", "]"}]], "Output",
 CellChangeTimes->{{3.613745525094096*^9, 3.613745579582096*^9}, 
   3.613745749992096*^9, 3.61374685069831*^9, 3.613747001475386*^9, 
   3.613747114465684*^9, 3.6138234773398495`*^9, 3.6140194325681353`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ratio", "[", 
   RowBox[{"{", 
    RowBox[{"a_", ",", "b_"}], "}"}], "]"}], ":=", 
  RowBox[{"b", "/", "a"}]}]], "Input",
 CellChangeTimes->{{3.6137472235095873`*^9, 3.6137473125144873`*^9}, {
  3.613747346666902*^9, 3.613747414838479*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"ArcTan", "[", 
   RowBox[{"ratio", "/@", "tmp"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6137474775594788`*^9, 3.613747504305479*^9}, {
  3.6137475426714787`*^9, 3.613747547623479*^9}}],

Cell[BoxData[
 GraphicsBox[
  {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
   EdgeForm[Opacity[0.644]], {}, 
   {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
    EdgeForm[Opacity[0.644]], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{-2., 0}, {-1.5, 6}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{31.250000417232457`, 103.73164052257727`}, {
         138.20458180678088`, 159.95458413515814`}}],
       StatusArea[#, 6]& ,
       TagBoxNote->"6"],
      StyleBox["6", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[6, {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{-1.5, 0}, {-1., 81}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{102.03164035568426`, 
         174.51328046102907`}, {-112.42044521177246`, 159.95458413515814`}}],
       StatusArea[#, 81]& ,
       TagBoxNote->"81"],
      StyleBox["81", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[81, {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{-1., 0}, {-0.5, 96}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{172.81328029413606`, 
         245.29492039948087`}, {-162.5454506154831, 159.95458413515814`}}],
       StatusArea[#, 96]& ,
       TagBoxNote->"96"],
      StyleBox["96", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[96, {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{-0.5, 0}, {0., 72}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{243.59492023258787`, 
         316.0765603379327}, {-82.34544196954607, 159.95458413515814`}}],
       StatusArea[#, 72]& ,
       TagBoxNote->"72"],
      StyleBox["72", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[72, {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0., 0}, {0.5, 69}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{314.37656017103967`, 
         386.8582002763845}, {-72.32044088880394, 159.95458413515814`}}],
       StatusArea[#, 69]& ,
       TagBoxNote->"69"],
      StyleBox["69", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[69, {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.5, 0}, {1., 75}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{385.1582001094915, 
         457.6398402148363}, {-92.3704430502882, 159.95458413515814`}}],
       StatusArea[#, 75]& ,
       TagBoxNote->"75"],
      StyleBox["75", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[75, {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{1., 0}, {1.5, 83}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{455.9398400479433, 
         528.421480153288}, {-119.10377926560056`, 159.95458413515814`}}],
       StatusArea[#, 83]& ,
       TagBoxNote->"83"],
      StyleBox["83", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[83, {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{1.5, 0}, {2., 18}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{526.721479986395, 599.20312009174}, {
         98.10457748381234, 159.95458413515814`}}],
       StatusArea[#, 18]& ,
       TagBoxNote->"18"],
      StyleBox["18", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[18, {
        GrayLevel[0]}], "Tooltip"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-2., 0},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  PlotRange->{{-2., 2.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.1]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6137475494644785`*^9, {3.6138234774418592`*^9, 3.613823477666882*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sandbox", "Subsection",
 CellChangeTimes->{{3.6137557095855846`*^9, 3.6137557182769284`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findAngle", "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.6137576413967147`*^9, 3.613757656203195*^9}}],

Cell[BoxData[
 FractionBox["\[Pi]", "2"]], "Output",
 CellChangeTimes->{{3.6137576503476095`*^9, 3.6137576571642914`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "[", "6", "]"}]], "Input",
 CellChangeTimes->{{3.613755837245383*^9, 3.613755840619069*^9}}],

Cell[BoxData["15"], "Output",
 CellChangeTimes->{3.613755908644864*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["a"], "Input",
 CellChangeTimes->{3.613755852647667*^9}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.613755854635064*^9, 3.613755912644664*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Count", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"g", "=", 
       RowBox[{"RandomChoice", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Norm", "[", 
         RowBox[{"x", "+", "g"}], "]"}], "<", "10"}], ",", 
       RowBox[{"x", "+", "g"}], ",", 
       RowBox[{"10", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "+", "g"}], ")"}], "/", 
         RowBox[{"Norm", "[", 
          RowBox[{"x", "+", "g"}], "]"}]}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}], ",", 
   RowBox[{
    RowBox[{"Norm", "[", 
     RowBox[{"x", "+", "g"}], "]"}], ">", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.613910877743966*^9, 3.6139109031685085`*^9}, {
  3.6139109480499964`*^9, 3.613910975610752*^9}, {3.6139110453987303`*^9, 
  3.6139110745366435`*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.613910903918584*^9, 3.6139109070468965`*^9}, 
   3.6139109500872*^9, {3.613911075233713*^9, 3.613911078048995*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1264, 662},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification->1.7000001668930054`,
FrontEndVersion->"10.2 for Microsoft Windows (64-bit) (July 29, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 177, 2, 119, "Section"],
Cell[759, 26, 119, 1, 48, "Item"],
Cell[881, 29, 535, 16, 50, "Input"],
Cell[1419, 47, 409, 10, 78, "Item"],
Cell[1831, 59, 272, 6, 50, "Input"],
Cell[CellGroupData[{
Cell[2128, 69, 671, 16, 115, "Input"],
Cell[2802, 87, 57380, 945, 758, 18273, 302, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[60197, 1035, 119, 2, 50, InheritFromParent],
Cell[60319, 1039, 94, 1, 50, InheritFromParent],
Cell[60416, 1042, 1109, 34, 115, "Input"],
Cell[61528, 1078, 282, 8, 50, "Input"],
Cell[61813, 1088, 1608, 43, 147, "Input"],
Cell[CellGroupData[{
Cell[63446, 1135, 224, 5, 50, "Input"],
Cell[63673, 1142, 310, 6, 49, "Output"]
}, Open  ]],
Cell[63998, 1151, 287, 7, 77, "Item"],
Cell[CellGroupData[{
Cell[64310, 1162, 398, 8, 50, "Input"],
Cell[64711, 1172, 5471, 160, 320, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70219, 1337, 624, 11, 50, "Input"],
Cell[70846, 1350, 4782, 169, 260, "Output"]
}, Open  ]],
Cell[75643, 1522, 293, 7, 48, "Item"],
Cell[CellGroupData[{
Cell[75961, 1533, 1489, 30, 83, "Input"],
Cell[77453, 1565, 5082, 83, 635, "Output"]
}, Open  ]],
Cell[82550, 1651, 220, 4, 48, "Item"],
Cell[CellGroupData[{
Cell[82795, 1659, 317, 7, 50, "Input"],
Cell[83115, 1668, 857, 28, 49, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[84021, 1702, 319, 5, 190, "Section"],
Cell[84343, 1709, 216, 7, 50, "Input"],
Cell[84562, 1718, 1280, 38, 147, "Input"],
Cell[CellGroupData[{
Cell[85867, 1760, 571, 15, 50, "Input"],
Cell[86441, 1777, 248, 5, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86726, 1787, 143, 4, 130, "Subsection"],
Cell[86872, 1793, 302, 6, 76, "Item"],
Cell[CellGroupData[{
Cell[87199, 1803, 431, 10, 50, "Input"],
Cell[87633, 1815, 983, 30, 80, "Output"]
}, Open  ]],
Cell[88631, 1848, 298, 3, 48, "Item"],
Cell[CellGroupData[{
Cell[88954, 1855, 891, 20, 83, "Input"],
Cell[89848, 1877, 130, 2, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90015, 1884, 78, 1, 50, "Input"],
Cell[90096, 1887, 79, 1, 49, "Output"]
}, Open  ]],
Cell[90190, 1891, 317, 5, 48, "Item"],
Cell[CellGroupData[{
Cell[90532, 1900, 309, 5, 50, "Input"],
Cell[90844, 1907, 442, 9, 38, "Message"],
Cell[91289, 1918, 274, 4, 49, "Output"]
}, Open  ]],
Cell[91578, 1925, 275, 7, 50, "Input"],
Cell[CellGroupData[{
Cell[91878, 1936, 245, 5, 50, "Input"],
Cell[92126, 1943, 5889, 180, 408, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[98064, 2129, 99, 1, 81, "Subsection"],
Cell[CellGroupData[{
Cell[98188, 2134, 177, 4, 50, "Input"],
Cell[98368, 2140, 122, 2, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[98527, 2147, 120, 2, 50, "Input"],
Cell[98650, 2151, 71, 1, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[98758, 2157, 69, 1, 50, "Input"],
Cell[98830, 2160, 92, 1, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[98959, 2166, 1313, 39, 115, "Input"],
Cell[100275, 2207, 166, 2, 49, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
